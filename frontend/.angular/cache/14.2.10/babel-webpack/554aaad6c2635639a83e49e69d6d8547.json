{"ast":null,"code":"'use strict';\n\nconst shared = require('../shared');\n\nconst MimeNode = require('../mime-node');\n\nconst mimeFuncs = require('../mime-funcs');\n\nclass MailMessage {\n  constructor(mailer, data) {\n    this.mailer = mailer;\n    this.data = {};\n    this.message = null;\n    data = data || {};\n    let options = mailer.options || {};\n    let defaults = mailer._defaults || {};\n    Object.keys(data).forEach(key => {\n      this.data[key] = data[key];\n    });\n    this.data.headers = this.data.headers || {}; // apply defaults\n\n    Object.keys(defaults).forEach(key => {\n      if (!(key in this.data)) {\n        this.data[key] = defaults[key];\n      } else if (key === 'headers') {\n        // headers is a special case. Allow setting individual default headers\n        Object.keys(defaults.headers).forEach(key => {\n          if (!(key in this.data.headers)) {\n            this.data.headers[key] = defaults.headers[key];\n          }\n        });\n      }\n    }); // force specific keys from transporter options\n\n    ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(key => {\n      if (key in options) {\n        this.data[key] = options[key];\n      }\n    });\n  }\n\n  resolveContent(...args) {\n    return shared.resolveContent(...args);\n  }\n\n  resolveAll(callback) {\n    let keys = [[this.data, 'html'], [this.data, 'text'], [this.data, 'watchHtml'], [this.data, 'amp'], [this.data, 'icalEvent']];\n\n    if (this.data.alternatives && this.data.alternatives.length) {\n      this.data.alternatives.forEach((alternative, i) => {\n        keys.push([this.data.alternatives, i]);\n      });\n    }\n\n    if (this.data.attachments && this.data.attachments.length) {\n      this.data.attachments.forEach((attachment, i) => {\n        if (!attachment.filename) {\n          attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n\n          if (attachment.filename.indexOf('.') < 0) {\n            attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);\n          }\n        }\n\n        if (!attachment.contentType) {\n          attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n        }\n\n        keys.push([this.data.attachments, i]);\n      });\n    }\n\n    let mimeNode = new MimeNode();\n    let addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];\n    addressKeys.forEach(address => {\n      let value;\n\n      if (this.message) {\n        value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);\n      } else if (this.data[address]) {\n        value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n      }\n\n      if (value && value.length) {\n        this.data[address] = value;\n      } else if (address in this.data) {\n        this.data[address] = null;\n      }\n    });\n    let singleKeys = ['from', 'sender'];\n    singleKeys.forEach(address => {\n      if (this.data[address]) {\n        this.data[address] = this.data[address].shift();\n      }\n    });\n    let pos = 0;\n\n    let resolveNext = () => {\n      if (pos >= keys.length) {\n        return callback(null, this.data);\n      }\n\n      let args = keys[pos++];\n\n      if (!args[0] || !args[0][args[1]]) {\n        return resolveNext();\n      }\n\n      shared.resolveContent(...args, (err, value) => {\n        if (err) {\n          return callback(err);\n        }\n\n        let node = {\n          content: value\n        };\n\n        if (args[0][args[1]] && typeof args[0][args[1]] === 'object' && !Buffer.isBuffer(args[0][args[1]])) {\n          Object.keys(args[0][args[1]]).forEach(key => {\n            if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {\n              node[key] = args[0][args[1]][key];\n            }\n          });\n        }\n\n        args[0][args[1]] = node;\n        resolveNext();\n      });\n    };\n\n    setImmediate(() => resolveNext());\n  }\n\n  normalize(callback) {\n    let envelope = this.data.envelope || this.message.getEnvelope();\n    let messageId = this.message.messageId();\n    this.resolveAll((err, data) => {\n      if (err) {\n        return callback(err);\n      }\n\n      data.envelope = envelope;\n      data.messageId = messageId;\n      ['html', 'text', 'watchHtml', 'amp'].forEach(key => {\n        if (data[key] && data[key].content) {\n          if (typeof data[key].content === 'string') {\n            data[key] = data[key].content;\n          } else if (Buffer.isBuffer(data[key].content)) {\n            data[key] = data[key].content.toString();\n          }\n        }\n      });\n\n      if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n        data.icalEvent.content = data.icalEvent.content.toString('base64');\n        data.icalEvent.encoding = 'base64';\n      }\n\n      if (data.alternatives && data.alternatives.length) {\n        data.alternatives.forEach(alternative => {\n          if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n            alternative.content = alternative.content.toString('base64');\n            alternative.encoding = 'base64';\n          }\n        });\n      }\n\n      if (data.attachments && data.attachments.length) {\n        data.attachments.forEach(attachment => {\n          if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n            attachment.content = attachment.content.toString('base64');\n            attachment.encoding = 'base64';\n          }\n        });\n      }\n\n      data.normalizedHeaders = {};\n      Object.keys(data.headers || {}).forEach(key => {\n        let value = [].concat(data.headers[key] || []).shift();\n        value = value && value.value || value;\n\n        if (value) {\n          if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {\n            value = this.message._encodeHeaderValue(key, value);\n          }\n\n          data.normalizedHeaders[key] = value;\n        }\n      });\n\n      if (data.list && typeof data.list === 'object') {\n        let listHeaders = this._getListHeaders(data.list);\n\n        listHeaders.forEach(entry => {\n          data.normalizedHeaders[entry.key] = entry.value.map(val => val && val.value || val).join(', ');\n        });\n      }\n\n      if (data.references) {\n        data.normalizedHeaders.references = this.message._encodeHeaderValue('references', data.references);\n      }\n\n      if (data.inReplyTo) {\n        data.normalizedHeaders['in-reply-to'] = this.message._encodeHeaderValue('in-reply-to', data.inReplyTo);\n      }\n\n      return callback(null, data);\n    });\n  }\n\n  setMailerHeader() {\n    if (!this.message || !this.data.xMailer) {\n      return;\n    }\n\n    this.message.setHeader('X-Mailer', this.data.xMailer);\n  }\n\n  setPriorityHeaders() {\n    if (!this.message || !this.data.priority) {\n      return;\n    }\n\n    switch ((this.data.priority || '').toString().toLowerCase()) {\n      case 'high':\n        this.message.setHeader('X-Priority', '1 (Highest)');\n        this.message.setHeader('X-MSMail-Priority', 'High');\n        this.message.setHeader('Importance', 'High');\n        break;\n\n      case 'low':\n        this.message.setHeader('X-Priority', '5 (Lowest)');\n        this.message.setHeader('X-MSMail-Priority', 'Low');\n        this.message.setHeader('Importance', 'Low');\n        break;\n\n      default: // do not add anything, since all messages are 'Normal' by default\n\n    }\n  }\n\n  setListHeaders() {\n    if (!this.message || !this.data.list || typeof this.data.list !== 'object') {\n      return;\n    } // add optional List-* headers\n\n\n    if (this.data.list && typeof this.data.list === 'object') {\n      this._getListHeaders(this.data.list).forEach(listHeader => {\n        listHeader.value.forEach(value => {\n          this.message.addHeader(listHeader.key, value);\n        });\n      });\n    }\n  }\n\n  _getListHeaders(listData) {\n    // make sure an url looks like <protocol:url>\n    return Object.keys(listData).map(key => ({\n      key: 'list-' + key.toLowerCase().trim(),\n      value: [].concat(listData[key] || []).map(value => ({\n        prepared: true,\n        foldLines: true,\n        value: [].concat(value || []).map(value => {\n          if (typeof value === 'string') {\n            value = {\n              url: value\n            };\n          }\n\n          if (value && value.url) {\n            if (key.toLowerCase().trim() === 'id') {\n              // List-ID: \"comment\" <domain>\n              let comment = value.comment || '';\n\n              if (mimeFuncs.isPlainText(comment)) {\n                comment = '\"' + comment + '\"';\n              } else {\n                comment = mimeFuncs.encodeWord(comment);\n              }\n\n              return (value.comment ? comment + ' ' : '') + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, '');\n            } // List-*: <http://domain> (comment)\n\n\n            let comment = value.comment || '';\n\n            if (!mimeFuncs.isPlainText(comment)) {\n              comment = mimeFuncs.encodeWord(comment);\n            }\n\n            return this._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');\n          }\n\n          return '';\n        }).filter(value => value).join(', ')\n      }))\n    }));\n  }\n\n  _formatListUrl(url) {\n    url = url.replace(/[\\s<]+|[\\s>]+/g, '');\n\n    if (/^(https?|mailto|ftp):/.test(url)) {\n      return '<' + url + '>';\n    }\n\n    if (/^[^@]+@[^@]+$/.test(url)) {\n      return '<mailto:' + url + '>';\n    }\n\n    return '<http://' + url + '>';\n  }\n\n}\n\nmodule.exports = MailMessage;","map":{"version":3,"names":["shared","require","MimeNode","mimeFuncs","MailMessage","constructor","mailer","data","message","options","defaults","_defaults","Object","keys","forEach","key","headers","resolveContent","args","resolveAll","callback","alternatives","length","alternative","i","push","attachments","attachment","filename","path","href","split","pop","shift","indexOf","detectExtension","contentType","detectMimeType","mimeNode","addressKeys","address","value","concat","_parseAddresses","getHeader","singleKeys","pos","resolveNext","err","node","content","Buffer","isBuffer","includes","setImmediate","normalize","envelope","getEnvelope","messageId","toString","icalEvent","encoding","normalizedHeaders","_encodeHeaderValue","list","listHeaders","_getListHeaders","entry","map","val","join","references","inReplyTo","setMailerHeader","xMailer","setHeader","setPriorityHeaders","priority","toLowerCase","setListHeaders","listHeader","addHeader","listData","trim","prepared","foldLines","url","comment","isPlainText","encodeWord","_formatListUrl","replace","filter","test","module","exports"],"sources":["/Users/koca/Desktop/pia_projekat/frontend/node_modules/nodemailer/lib/mailer/mail-message.js"],"sourcesContent":["'use strict';\n\nconst shared = require('../shared');\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\nclass MailMessage {\n    constructor(mailer, data) {\n        this.mailer = mailer;\n        this.data = {};\n        this.message = null;\n\n        data = data || {};\n        let options = mailer.options || {};\n        let defaults = mailer._defaults || {};\n\n        Object.keys(data).forEach(key => {\n            this.data[key] = data[key];\n        });\n\n        this.data.headers = this.data.headers || {};\n\n        // apply defaults\n        Object.keys(defaults).forEach(key => {\n            if (!(key in this.data)) {\n                this.data[key] = defaults[key];\n            } else if (key === 'headers') {\n                // headers is a special case. Allow setting individual default headers\n                Object.keys(defaults.headers).forEach(key => {\n                    if (!(key in this.data.headers)) {\n                        this.data.headers[key] = defaults.headers[key];\n                    }\n                });\n            }\n        });\n\n        // force specific keys from transporter options\n        ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(key => {\n            if (key in options) {\n                this.data[key] = options[key];\n            }\n        });\n    }\n\n    resolveContent(...args) {\n        return shared.resolveContent(...args);\n    }\n\n    resolveAll(callback) {\n        let keys = [\n            [this.data, 'html'],\n            [this.data, 'text'],\n            [this.data, 'watchHtml'],\n            [this.data, 'amp'],\n            [this.data, 'icalEvent']\n        ];\n\n        if (this.data.alternatives && this.data.alternatives.length) {\n            this.data.alternatives.forEach((alternative, i) => {\n                keys.push([this.data.alternatives, i]);\n            });\n        }\n\n        if (this.data.attachments && this.data.attachments.length) {\n            this.data.attachments.forEach((attachment, i) => {\n                if (!attachment.filename) {\n                    attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                    if (attachment.filename.indexOf('.') < 0) {\n                        attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);\n                    }\n                }\n\n                if (!attachment.contentType) {\n                    attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n                }\n\n                keys.push([this.data.attachments, i]);\n            });\n        }\n\n        let mimeNode = new MimeNode();\n\n        let addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];\n\n        addressKeys.forEach(address => {\n            let value;\n            if (this.message) {\n                value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);\n            } else if (this.data[address]) {\n                value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n            }\n            if (value && value.length) {\n                this.data[address] = value;\n            } else if (address in this.data) {\n                this.data[address] = null;\n            }\n        });\n\n        let singleKeys = ['from', 'sender'];\n        singleKeys.forEach(address => {\n            if (this.data[address]) {\n                this.data[address] = this.data[address].shift();\n            }\n        });\n\n        let pos = 0;\n        let resolveNext = () => {\n            if (pos >= keys.length) {\n                return callback(null, this.data);\n            }\n            let args = keys[pos++];\n            if (!args[0] || !args[0][args[1]]) {\n                return resolveNext();\n            }\n            shared.resolveContent(...args, (err, value) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                let node = {\n                    content: value\n                };\n                if (args[0][args[1]] && typeof args[0][args[1]] === 'object' && !Buffer.isBuffer(args[0][args[1]])) {\n                    Object.keys(args[0][args[1]]).forEach(key => {\n                        if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {\n                            node[key] = args[0][args[1]][key];\n                        }\n                    });\n                }\n\n                args[0][args[1]] = node;\n                resolveNext();\n            });\n        };\n\n        setImmediate(() => resolveNext());\n    }\n\n    normalize(callback) {\n        let envelope = this.data.envelope || this.message.getEnvelope();\n        let messageId = this.message.messageId();\n\n        this.resolveAll((err, data) => {\n            if (err) {\n                return callback(err);\n            }\n\n            data.envelope = envelope;\n            data.messageId = messageId;\n\n            ['html', 'text', 'watchHtml', 'amp'].forEach(key => {\n                if (data[key] && data[key].content) {\n                    if (typeof data[key].content === 'string') {\n                        data[key] = data[key].content;\n                    } else if (Buffer.isBuffer(data[key].content)) {\n                        data[key] = data[key].content.toString();\n                    }\n                }\n            });\n\n            if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n                data.icalEvent.content = data.icalEvent.content.toString('base64');\n                data.icalEvent.encoding = 'base64';\n            }\n\n            if (data.alternatives && data.alternatives.length) {\n                data.alternatives.forEach(alternative => {\n                    if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n                        alternative.content = alternative.content.toString('base64');\n                        alternative.encoding = 'base64';\n                    }\n                });\n            }\n\n            if (data.attachments && data.attachments.length) {\n                data.attachments.forEach(attachment => {\n                    if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n                        attachment.content = attachment.content.toString('base64');\n                        attachment.encoding = 'base64';\n                    }\n                });\n            }\n\n            data.normalizedHeaders = {};\n            Object.keys(data.headers || {}).forEach(key => {\n                let value = [].concat(data.headers[key] || []).shift();\n                value = (value && value.value) || value;\n                if (value) {\n                    if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {\n                        value = this.message._encodeHeaderValue(key, value);\n                    }\n                    data.normalizedHeaders[key] = value;\n                }\n            });\n\n            if (data.list && typeof data.list === 'object') {\n                let listHeaders = this._getListHeaders(data.list);\n                listHeaders.forEach(entry => {\n                    data.normalizedHeaders[entry.key] = entry.value.map(val => (val && val.value) || val).join(', ');\n                });\n            }\n\n            if (data.references) {\n                data.normalizedHeaders.references = this.message._encodeHeaderValue('references', data.references);\n            }\n\n            if (data.inReplyTo) {\n                data.normalizedHeaders['in-reply-to'] = this.message._encodeHeaderValue('in-reply-to', data.inReplyTo);\n            }\n\n            return callback(null, data);\n        });\n    }\n\n    setMailerHeader() {\n        if (!this.message || !this.data.xMailer) {\n            return;\n        }\n        this.message.setHeader('X-Mailer', this.data.xMailer);\n    }\n\n    setPriorityHeaders() {\n        if (!this.message || !this.data.priority) {\n            return;\n        }\n        switch ((this.data.priority || '').toString().toLowerCase()) {\n            case 'high':\n                this.message.setHeader('X-Priority', '1 (Highest)');\n                this.message.setHeader('X-MSMail-Priority', 'High');\n                this.message.setHeader('Importance', 'High');\n                break;\n            case 'low':\n                this.message.setHeader('X-Priority', '5 (Lowest)');\n                this.message.setHeader('X-MSMail-Priority', 'Low');\n                this.message.setHeader('Importance', 'Low');\n                break;\n            default:\n            // do not add anything, since all messages are 'Normal' by default\n        }\n    }\n\n    setListHeaders() {\n        if (!this.message || !this.data.list || typeof this.data.list !== 'object') {\n            return;\n        }\n        // add optional List-* headers\n        if (this.data.list && typeof this.data.list === 'object') {\n            this._getListHeaders(this.data.list).forEach(listHeader => {\n                listHeader.value.forEach(value => {\n                    this.message.addHeader(listHeader.key, value);\n                });\n            });\n        }\n    }\n\n    _getListHeaders(listData) {\n        // make sure an url looks like <protocol:url>\n        return Object.keys(listData).map(key => ({\n            key: 'list-' + key.toLowerCase().trim(),\n            value: [].concat(listData[key] || []).map(value => ({\n                prepared: true,\n                foldLines: true,\n                value: []\n                    .concat(value || [])\n                    .map(value => {\n                        if (typeof value === 'string') {\n                            value = {\n                                url: value\n                            };\n                        }\n\n                        if (value && value.url) {\n                            if (key.toLowerCase().trim() === 'id') {\n                                // List-ID: \"comment\" <domain>\n                                let comment = value.comment || '';\n                                if (mimeFuncs.isPlainText(comment)) {\n                                    comment = '\"' + comment + '\"';\n                                } else {\n                                    comment = mimeFuncs.encodeWord(comment);\n                                }\n\n                                return (value.comment ? comment + ' ' : '') + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, '');\n                            }\n\n                            // List-*: <http://domain> (comment)\n                            let comment = value.comment || '';\n                            if (!mimeFuncs.isPlainText(comment)) {\n                                comment = mimeFuncs.encodeWord(comment);\n                            }\n\n                            return this._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');\n                        }\n\n                        return '';\n                    })\n                    .filter(value => value)\n                    .join(', ')\n            }))\n        }));\n    }\n\n    _formatListUrl(url) {\n        url = url.replace(/[\\s<]+|[\\s>]+/g, '');\n        if (/^(https?|mailto|ftp):/.test(url)) {\n            return '<' + url + '>';\n        }\n        if (/^[^@]+@[^@]+$/.test(url)) {\n            return '<mailto:' + url + '>';\n        }\n\n        return '<http://' + url + '>';\n    }\n}\n\nmodule.exports = MailMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}